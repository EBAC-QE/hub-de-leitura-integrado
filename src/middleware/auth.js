const jwt = require('jsonwebtoken');
const SECRET_KEY = process.env.JWT_SECRET || "admin@admin";

// Middleware para verificar token JWT
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({ 
      message: "Token de acesso necess√°rio",
      error: "MISSING_TOKEN",
      hint: "Fa√ßa login para obter um token e inclua no cabe√ßalho: Authorization: Bearer {token}"
    });
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      if (err.name === 'TokenExpiredError') {
        return res.status(401).json({ 
          message: "Token expirado",
          error: "EXPIRED_TOKEN",
          expiredAt: err.expiredAt,
          hint: "Fa√ßa login novamente para obter um novo token"
        });
      } else if (err.name === 'JsonWebTokenError') {
        return res.status(401).json({ 
          message: "Token inv√°lido",
          error: "INVALID_TOKEN",
          hint: "Verifique se o token est√° correto e no formato: Bearer {token}"
        });
      } else {
        return res.status(401).json({ 
          message: "Erro na verifica√ß√£o do token",
          error: "TOKEN_ERROR"
        });
      }
    }

    // Adicionar informa√ß√µes do usu√°rio na requisi√ß√£o
    req.user = user;
    next();
  });
};

// Middleware para verificar se o usu√°rio √© administrador
const isAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({ 
      message: "Usu√°rio n√£o autenticado",
      error: "USER_NOT_AUTHENTICATED"
    });
  }

  if (!req.user.isAdmin) {
    return res.status(403).json({ 
      message: "Acesso negado. Apenas administradores podem realizar esta a√ß√£o.",
      error: "ADMIN_REQUIRED",
      userRole: "user",
      requiredRole: "admin"
    });
  }

  next();
};

// Middleware combinado: autentica√ß√£o + verifica√ß√£o de admin
const authenticateAdmin = (req, res, next) => {
  authenticateToken(req, res, (err) => {
    if (err) return;
    isAdmin(req, res, next);
  });
};

// Middleware para verificar se o usu√°rio pode acessar o recurso
// (pr√≥prio recurso ou √© admin)
const canAccessResource = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({ 
      message: "Usu√°rio n√£o autenticado",
      error: "USER_NOT_AUTHENTICATED"
    });
  }

  const requestedUserId = parseInt(req.params.userId || req.params.id);
  const currentUserId = req.user.id;
  const isAdmin = req.user.isAdmin;

  // Admin pode acessar qualquer recurso
  if (isAdmin) {
    return next();
  }

  // Usu√°rio comum s√≥ pode acessar pr√≥prios recursos
  if (requestedUserId === currentUserId) {
    return next();
  }

  return res.status(403).json({ 
    message: "Acesso negado. Voc√™ s√≥ pode acessar seus pr√≥prios recursos.",
    error: "RESOURCE_ACCESS_DENIED",
    requestedUserId,
    currentUserId
  });
};

// Middleware opcional de autentica√ß√£o (n√£o falha se n√£o houver token)
const optionalAuth = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    req.user = null;
    return next();
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      req.user = null;
    } else {
      req.user = user;
    }
    next();
  });
};

// Fun√ß√£o para gerar token JWT
const generateToken = (user) => {
  const payload = {
    id: user.id,
    email: user.email,
    isAdmin: !!user.isAdmin
  };

  return jwt.sign(payload, SECRET_KEY, { expiresIn: '8h' });
};

// Fun√ß√£o para verificar se um token √© v√°lido (sem middleware)
const verifyToken = (token) => {
  try {
    return jwt.verify(token, SECRET_KEY);
  } catch (error) {
    return null;
  }
};

// Middleware para log de tentativas de autentica√ß√£o
const logAuthAttempts = (req, res, next) => {
  if (process.env.NODE_ENV === 'development') {
    const authHeader = req.headers['authorization'];
    const hasToken = !!authHeader;
    const endpoint = `${req.method} ${req.path}`;
    
    console.log(`üîê Auth attempt: ${endpoint} - Token: ${hasToken ? 'present' : 'missing'}`);
    
    if (hasToken) {
      const token = authHeader.split(' ')[1];
      const decoded = verifyToken(token);
      if (decoded) {
        console.log(`   ‚úÖ Valid user: ${decoded.email} (admin: ${decoded.isAdmin})`);
      } else {
        console.log(`   ‚ùå Invalid token`);
      }
    }
  }
  next();
};

module.exports = {
  authenticateToken,
  isAdmin,
  authenticateAdmin,
  canAccessResource,
  optionalAuth,
  generateToken,
  verifyToken,
  logAuthAttempts
};