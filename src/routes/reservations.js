const express = require("express");
const router = express.Router();
const { authenticateToken } = require("../middleware/auth");
const ReservationsController = require("../controllers/reservationsController");

/**
 * @swagger
 * components:
 *   schemas:
 *     Reservation:
 *       type: object
 *       description: Reserva de livro por um usu√°rio
 *       properties:
 *         id:
 *           type: integer
 *           description: ID √∫nico da reserva
 *           example: 1
 *         status:
 *           type: string
 *           enum: [active, picked-up, returned, cancelled, expired]
 *           description: |
 *             Status da reserva:
 *             * `active` - Aguardando retirada (48h)
 *             * `picked-up` - Livro retirado pelo usu√°rio (14 dias para devolver)
 *             * `returned` - Livro devolvido com sucesso
 *             * `cancelled` - Reserva cancelada pelo usu√°rio
 *             * `expired` - Prazo de retirada expirou
 *           example: "active"
 *         calculated_status:
 *           type: string
 *           enum: [active, picked-up, returned, cancelled, expired, overdue]
 *           description: Status calculado considerando prazos (inclui 'overdue' para atraso na devolu√ß√£o)
 *           example: "active"
 *         reservation_date:
 *           type: string
 *           format: date-time
 *           description: Data e hora quando a reserva foi feita
 *           example: "2024-01-15T10:30:00Z"
 *         pickup_deadline:
 *           type: string
 *           format: date-time
 *           description: Prazo limite para retirar o livro (48h ap√≥s reserva)
 *           example: "2024-01-17T10:30:00Z"
 *         pickup_date:
 *           type: string
 *           format: date-time
 *           description: Data quando o livro foi retirado (null se n√£o retirado)
 *           example: "2024-01-16T14:20:00Z"
 *         return_deadline:
 *           type: string
 *           format: date-time
 *           description: Prazo para devolver o livro (14 dias ap√≥s retirada)
 *           example: "2024-01-30T14:20:00Z"
 *         return_date:
 *           type: string
 *           format: date-time
 *           description: Data quando o livro foi devolvido (null se n√£o devolvido)
 *           example: "2024-01-28T09:15:00Z"
 *         notes:
 *           type: string
 *           description: Observa√ß√µes sobre a reserva
 *           example: "Livro para estudo acad√™mico"
 *           maxLength: 500
 *         hours_remaining:
 *           type: integer
 *           description: Horas restantes para vencimento (negativo se atrasado)
 *           example: 36
 *         title:
 *           type: string
 *           description: T√≠tulo do livro reservado
 *           example: "Dom Casmurro"
 *         author:
 *           type: string
 *           description: Autor do livro
 *           example: "Machado de Assis"
 *         category:
 *           type: string
 *           description: Categoria do livro
 *           example: "Literatura Brasileira"
 *         cover_image:
 *           type: string
 *           description: Nome do arquivo da capa
 *           example: "dom-casmurro.jpg"
 *         isbn:
 *           type: string
 *           description: C√≥digo ISBN do livro
 *           example: "978-85-260-1318-3"
 *       required: [status, reservation_date, title, author]
 *     ReservationCreateRequest:
 *       type: object
 *       description: Dados para criar nova reserva
 *       properties:
 *         bookId:
 *           type: integer
 *           description: ID do livro a ser reservado
 *           example: 1
 *           minimum: 1
 *         notes:
 *           type: string
 *           description: Observa√ß√µes sobre a reserva (opcional)
 *           example: "Livro para trabalho de conclus√£o"
 *           maxLength: 500
 *       required: [bookId]
 *     ReservationUpdateRequest:
 *       type: object
 *       description: Dados para atualizar reserva
 *       properties:
 *         action:
 *           type: string
 *           enum: [cancel, update_notes]
 *           description: A√ß√£o a ser realizada na reserva
 *           example: "cancel"
 *         notes:
 *           type: string
 *           description: Novas observa√ß√µes (usado com action='update_notes')
 *           example: "Observa√ß√µes atualizadas"
 *           maxLength: 500
 *       required: [action]
 *     BasketToReservationsRequest:
 *       type: object
 *       description: Dados para criar reservas a partir do carrinho
 *       properties:
 *         notes:
 *           type: string
 *           description: Observa√ß√µes para todas as reservas
 *           example: "Livros para estudo do semestre"
 *           maxLength: 500
 *         clearBasket:
 *           type: boolean
 *           description: Se deve limpar o carrinho ap√≥s criar reservas
 *           example: true
 *           default: true
 *     ReservationsListResponse:
 *       type: object
 *       description: Lista paginada de reservas com estat√≠sticas
 *       properties:
 *         reservations:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/Reservation'
 *         statistics:
 *           type: object
 *           description: Estat√≠sticas das reservas do usu√°rio
 *           properties:
 *             active:
 *               type: integer
 *               description: Reservas aguardando retirada
 *               example: 2
 *             pickedUp:
 *               type: integer
 *               description: Livros retirados (em posse do usu√°rio)
 *               example: 1
 *             returned:
 *               type: integer
 *               description: Livros j√° devolvidos
 *               example: 5
 *             cancelled:
 *               type: integer
 *               description: Reservas canceladas
 *               example: 1
 *             overdue:
 *               type: integer
 *               description: Livros em atraso para devolu√ß√£o
 *               example: 0
 *             expired:
 *               type: integer
 *               description: Reservas que expiraram (n√£o retiradas a tempo)
 *               example: 1
 *         pagination:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *               example: 15
 *             limit:
 *               type: integer
 *               example: 20
 *             offset:
 *               type: integer
 *               example: 0
 *             hasNext:
 *               type: boolean
 *               example: false
 *             hasPrev:
 *               type: boolean
 *               example: false
 *             showing:
 *               type: integer
 *               example: 15
 *         filters:
 *           type: object
 *           properties:
 *             status:
 *               type: string
 *               example: "all"
 *             orderBy:
 *               type: string
 *               example: "desc"
 */

/**
 * @swagger
 * /api/reservations:
 *   get:
 *     tags: [üìù Reserva de Livros]
 *     summary: Listar minhas reservas
 *     description: |
 *       **Lista todas as reservas do usu√°rio autenticado com estat√≠sticas**
 *
 *       ### üéØ Cen√°rios para testar:
 *       - ‚úÖ Listar todas as reservas (sem filtros)
 *       - üîç Filtrar por status espec√≠fico
 *       - üìÑ Pagina√ß√£o com diferentes limites
 *       - üìä Verificar estat√≠sticas inclu√≠das
 *       - ‚è∞ Status calculado (overdue, expired)
 *       - üïê Horas restantes para vencimentos
 *
 *       ### üìã Informa√ß√µes inclu√≠das:
 *       - Detalhes completos da reserva
 *       - Informa√ß√µes do livro (t√≠tulo, autor, capa)
 *       - Status calculado considerando prazos
 *       - Tempo restante para vencimentos
 *       - Estat√≠sticas por status
 *
 *       ### ‚ö†Ô∏è Regras de neg√≥cio:
 *       - Usu√°rio s√≥ v√™ pr√≥prias reservas
 *       - Status 'overdue' √© calculado automaticamente
 *       - Status 'expired' para reservas n√£o retiradas
 *       - Ordena√ß√£o padr√£o: mais recentes primeiro
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: status
 *         in: query
 *         description: Filtrar por status espec√≠fico
 *         schema:
 *           type: string
 *           enum: [active, picked-up, returned, cancelled, expired, overdue]
 *           example: "active"
 *       - name: limit
 *         in: query
 *         description: N√∫mero de reservas por p√°gina
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 20
 *           example: 20
 *       - name: offset
 *         in: query
 *         description: N√∫mero de reservas para pular (pagina√ß√£o)
 *         schema:
 *           type: integer
 *           minimum: 0
 *           default: 0
 *           example: 0
 *       - name: orderBy
 *         in: query
 *         description: Ordem das reservas
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *           example: "desc"
 *     responses:
 *       200:
 *         description: ‚úÖ Lista de reservas carregada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ReservationsListResponse'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 *   post:
 *     tags: [üìù Reserva de Livros]
 *     summary: Criar nova reserva
 *     description: |
 *       **Cria uma nova reserva de livro para o usu√°rio autenticado**
 *
 *       ### üéØ Cen√°rios para testar:
 *       - ‚úÖ Reservar livro dispon√≠vel (sucesso)
 *       - ‚ùå Reservar livro esgotado (400)
 *       - ‚ùå Reservar livro inexistente (404)
 *       - ‚ùå Reservar mesmo livro duas vezes (400)
 *       - ‚ùå Exceder limite de 5 reservas simult√¢neas (400)
 *       - ‚úÖ Reserva com observa√ß√µes
 *       - ‚úÖ Reserva sem observa√ß√µes
 *
 *       ### üîÑ Fluxo da reserva:
 *       1. **Criada** - Status 'active', prazo 48h para retirada
 *       2. **Retirada** - Admin marca como 'picked-up', prazo 14 dias
 *       3. **Devolu√ß√£o** - Admin marca como 'returned'
 *       4. **Cancelamento** - Usu√°rio pode cancelar se 'active'
 *
 *       ### ‚ö†Ô∏è Regras de neg√≥cio:
 *       - Livro deve estar dispon√≠vel (available_copies > 0)
 *       - Usu√°rio n√£o pode ter reserva ativa do mesmo livro
 *       - M√°ximo 5 reservas simult√¢neas por usu√°rio
 *       - Prazo autom√°tico: 48h para retirada
 *       - Decrementa automaticamente available_copies
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ReservationCreateRequest'
 *           examples:
 *             reserva_simples:
 *               summary: Reserva sem observa√ß√µes
 *               value:
 *                 bookId: 1
 *             reserva_com_notes:
 *               summary: Reserva com observa√ß√µes
 *               value:
 *                 bookId: 2
 *                 notes: "Livro necess√°rio para trabalho de conclus√£o de curso"
 *             reserva_invalida:
 *               summary: Livro inexistente (teste de erro)
 *               value:
 *                 bookId: 9999
 *     responses:
 *       201:
 *         description: ‚úÖ Reserva criada com sucesso
 *       400:
 *         $ref: '#/components/responses/ValidationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 */
router.get("/", authenticateToken, ReservationsController.getUserReservations);
router.post("/", authenticateToken, ReservationsController.createReservation);

/**
 * @swagger
 * /api/reservations/from-basket:
 *   post:
 *     tags: [üìù Reserva de Livros]
 *     summary: Criar reservas a partir do carrinho
 *     description: |
 *       **Converte todos os itens do carrinho em reservas ativas**
 *       
 *       ### üéØ Cen√°rios para testar:
 *       - ‚úÖ Carrinho com livros dispon√≠veis (sucesso)
 *       - ‚ùå Carrinho vazio (400)
 *       - ‚ùå Alguns livros ficaram indispon√≠veis (400)
 *       - ‚ùå Exceder limite de reservas simult√¢neas (400)
 *       - ‚úÖ Limpeza autom√°tica do carrinho
 *       - ‚úÖ Manter itens no carrinho (clearBasket=false)
 *       
 *       ### üîÑ Processo:
 *       1. Verifica disponibilidade de todos os itens
 *       2. Valida limite de reservas simult√¢neas
 *       3. Cria reservas para todos os itens v√°lidos
 *       4. Limpa carrinho (se solicitado)
 *       5. Retorna resumo das reservas criadas
 *       
 *       ### ‚ö†Ô∏è Regras de neg√≥cio:
 *       - Todos os livros devem estar dispon√≠veis
 *       - Respeitado limite de 5 reservas simult√¢neas
 *       - Opera√ß√£o √© at√¥mica (tudo ou nada)
 *       - Prazo padr√£o: 48h para cada retirada
 *       - Carrinho √© limpo por padr√£o ap√≥s sucesso
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: false
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/BasketToReservationsRequest'
 *           examples:
 *             carrinho_completo:
 *               summary: Criar reservas e limpar carrinho
 *               value:
 *                 notes: "Livros para estudo do semestre"
 *                 clearBasket: true
 *             manter_carrinho:
 *               summary: Criar reservas mantendo carrinho
 *               value:
 *                 notes: "Reservas tempor√°rias"
 *                 clearBasket: false
 *     responses:
 *       201:
 *         description: ‚úÖ Reservas criadas com sucesso
 *       400:
 *         $ref: '#/components/responses/ValidationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 */
router.post("/from-basket", authenticateToken, ReservationsController.createReservationsFromBasket);

/**
 * @swagger
 * /api/reservations/statistics:
 *   get:
 *     tags: [üìù Reserva de Livros]
 *     summary: Estat√≠sticas das reservas do usu√°rio
 *     description: |
 *       **Retorna estat√≠sticas detalhadas das reservas do usu√°rio**
 *       
 *       ### üìä Informa√ß√µes inclu√≠das:
 *       - Contadores por status
 *       - M√©tricas de performance
 *       - Hist√≥rico mensal
 *       - Categorias favoritas
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: ‚úÖ Estat√≠sticas carregadas com sucesso
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 */
router.get("/statistics", authenticateToken, ReservationsController.getUserReservationStats);

/**
 * @swagger
 * /api/reservations/{id}:
 *   put:
 *     tags: [üìù Reserva de Livros]
 *     summary: Atualizar reserva
 *     description: |
 *       **Permite diferentes a√ß√µes na reserva (cancelar, atualizar observa√ß√µes)**
 *
 *       ### üîÑ A√ß√µes dispon√≠veis:
 *       - **cancel** - Cancela reserva ativa (libera o livro)
 *       - **update_notes** - Atualiza apenas as observa√ß√µes
 *
 *       ### ‚ö†Ô∏è Regras de neg√≥cio:
 *       - Usu√°rio s√≥ pode modificar pr√≥prias reservas
 *       - Cancelamento s√≥ √© permitido para reservas 'active'
 *       - Cancelar libera automaticamente o livro (available_copies++)
 *       - Observa√ß√µes t√™m limite de 500 caracteres
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID da reserva a ser atualizada
 *         schema:
 *           type: integer
 *           minimum: 1
 *           example: 5
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ReservationUpdateRequest'
 *           examples:
 *             cancelar_reserva:
 *               summary: Cancelar reserva ativa
 *               value:
 *                 action: "cancel"
 *             atualizar_observacoes:
 *               summary: Atualizar observa√ß√µes
 *               value:
 *                 action: "update_notes"
 *                 notes: "Observa√ß√µes atualizadas sobre a reserva"
 *     responses:
 *       200:
 *         description: ‚úÖ Reserva atualizada com sucesso
 *       400:
 *         $ref: '#/components/responses/ValidationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 *   delete:
 *     tags: [üìù Reserva de Livros]
 *     summary: Cancelar reserva (m√©todo alternativo)
 *     description: |
 *       **Cancela uma reserva ativa do usu√°rio (alternativa ao PUT com action=cancel)**
 *
 *       ### ‚ö†Ô∏è Regras de neg√≥cio:
 *       - Apenas reservas com status 'active' podem ser canceladas
 *       - Libera automaticamente o livro para outros usu√°rios
 *       - Opera√ß√£o √© irrevers√≠vel
 *       - Usu√°rio s√≥ pode cancelar pr√≥prias reservas
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID da reserva a ser cancelada
 *         schema:
 *           type: integer
 *           minimum: 1
 *           example: 8
 *     responses:
 *       200:
 *         description: ‚úÖ Reserva cancelada com sucesso
 *       400:
 *         description: ‚ùå Reserva n√£o pode ser cancelada
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *       500:
 *         $ref: '#/components/responses/ServerError'
 */
router.put("/:id", authenticateToken, ReservationsController.updateReservation);
router.delete("/:id", authenticateToken, ReservationsController.cancelReservation);

module.exports = router;